<?xml version="1.0"?>
<profile title="Generic" id="generic" version="1.1">
  <feature id="json" value="0" type="boolean">
    <name>JSON</name>
    <description>Native JSON Object</description>
    <data>
      <plugin id="KnowledgeBase" property="json" />
      <plugin id="DeviceAtlas" property="JSONSupported" />
    </data>
    <test type="text/javascript"><![CDATA[
      return !!window.JSON?1:0;
      ]]></test>
  </feature>

  <feature id="width" value="800" type="number">
    <name>Screen Width</name>
    <description>From window.innerWidth if available, otherwise from screen.width.</description>
    <data>
      <plugin id="KnowledgeBase" property="width"/>
      <plugin id="DeviceAtlas" property="displayWidth"/>
    </data>
    <test type="text/javascript"><![CDATA[
      return (window.innerWidth>0)?window.innerWidth:screen.width;
      ]]></test>
  </feature>

  <feature id="height" value="600" type="number">
    <name>Screen Height</name>
    <description>From window.innerHeight if available, otherwise from screen.height.</description>
    <data>
      <plugin id="KnowledgeBase" property="height"/>
      <plugin id="DeviceAtlas" property="displayHeight"/>
    </data>
    <test type="text/javascript"><![CDATA[
      return (window.innerHeight>0)?window.innerHeight:screen.height;
      ]]></test>
  </feature>

  <feature id="clr" value="8" type="number">
    <name>Colour Depth</name>
    <description>Get the colour depth of the device display.</description>
    <data />
    <test type="text/javascript"><![CDATA[
      return screen.colorDepth;
      ]]></test>
  </feature>

  <feature id="xhr" value="1" type="boolean">
    <name>XMLHttpRequest API</name>
    <description>Is an XMLHttpRequest object available on this device.</description>
    <data />
    <test type="text/javascript"><![CDATA[
      try { xhr = new XMLHttpRequest(); } catch (e) {}
      try { xhr = new ActiveXObject("Microsoft.XMLHTTP"); } catch (e) {}
      try { xhr = new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) {}
      return +(xhr!=null);
      ]]></test>
  </feature>

  <feature id="video" value="1" type="boolean">
    <name>HTML5 Video</name>
    <description>Support for HTML5 video?</description>
    <data />
    <test type="text/javascript"><![CDATA[
    var video = +!!document.createElement('video').canPlayType;
      if(video){
        var v = document.createElement("video");
        v.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"')?video+='-h264':false;
        v.canPlayType('video/ogg; codecs="theora, vorbis"')?video+='-ogg':false;
        v.canPlayType('video/webm; codecs="vp8, vorbis"')?video+='-webm':false;
      }
      return video;
      ]]></test>
  </feature>

  <feature id="geo" value="0" type="boolean">
    <name>HTML5 Location API</name>
    <description>Support for HTML5 geo-location API</description>
    <data />
    <test type="text/javascript"><![CDATA[
      return +!!navigator.geolocation;
      ]]></test>
  </feature>

  <feature id="swf" value="0" type="string">
    <name>Adobe Flash Player</name>
    <description>Which version of the Adobe Flash Player (if any) is installed on this device.</description>
    <data />
    <test type="text/javascript"><![CDATA[
      try{
        try{
          var axo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash.6');
          try { axo.AllowScriptAccess = 'always'; }
          catch(e) { return '6,0,0'; }
        } catch(e) {}
          var v = new ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1] ;
          return v.replace(/,/gi, '.');
      }catch(e){
        try{
          if(navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin){
            var v = (navigator.plugins["Shockwave Flash 2.0"] ||
            navigator.plugins["Shockwave Flash"]).description.replace(/\D+/g, ",").match(/^,?(.+),?$/)[1];
            return v.replace(/,/gi, '.');
          }
        }catch(e){}
      }
      return '0.0.0';
      ]]></test>
  </feature>

  <feature id="font" value="0" type="boolean">
    <name>Web Fonts</name>
    <description>Ability to use web fonts.</description>
    <data />
    <test type="text/javascript"><![CDATA[
      var sheet,
      head = document.head || document.getElementsByTagName('head')[0] || docElement,
      style = document.createElement("style"),
      impl = document.implementation || { hasFeature: function() { return false; } };
      style.type = 'text/css';
      head.insertBefore(style, head.firstChild);
      sheet = style.sheet || style.styleSheet;
      /* removing it crashes IE browsers */
      /* head.removeChild(style); */
      var supportAtRule = impl.hasFeature('CSS2', '') ?
      function(rule){
        if (!(sheet && rule)) return false;
        var result = false;
        try{
          sheet.insertRule(rule, 0);
          result = !(/unknown/i).test(sheet.cssRules[0].cssText);
          sheet.deleteRule(sheet.cssRules.length - 1);
        }catch(e){}
        return +result;
      } :
      function(rule){
        if (!(sheet && rule)) return false;
        sheet.cssText = rule;
        return +sheet.cssText.length !== 0 && !(/unknown/i).test(sheet.cssText)&&sheet.cssText.replace(/\r+|\n+/g, '').indexOf(rule.split(' ')[0]) === 0;
      };
      return +supportAtRule('@font-face { font-family: "font"; src: "font.ttf"; }');
      ]]></test>
  </feature>

  <feature id="svg" value="0" type="boolean">
    <name>SVG Graphics</name>
    <description>Are SVG graphics supported?</description>
    <data />
    <test type="text/javascript"><![CDATA[
      return +!!document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1");
      ]]></test>
  </feature>

  <feature id="cvs" value="0" type="boolean">
    <name>HMTL5 Canvas</name>
    <description>Is HTML5 canvas supported.</description>
    <data />
    <test type="text/javascript"><![CDATA[
      var canvas = +!!document.createElement('canvas').getContext;
      if(canvas){
        var c = document.createElement( 'canvas' ).getContext('2d');
        typeof c.fillText=='function'?canvas+="-text":false;
      }
      return canvas;
      ]]></test>
  </feature>

  <feature id="touch" value="0" type="boolean">
    <name>Touch Events</name>
    <description>Ability to create TouchEvent listeners.</description>
    <data>
    <plugin id="KnowledgeBase" property="touch"/>
    <plugin id="DeviceAtlas" property="touchScreen"/>
    </data>
    <test type="text/javascript"><![CDATA[
    try {
      document.createEvent("TouchEvent");
      return 1;
    }
    catch(e) {
      if (typeof navigator.msMaxTouchPoints !== "undefined" && navigator.msMaxTouchPoints > 0) {
        return 1;
      }
      else {
        return 0;
      }
    }
    ]]></test>
  </feature>

  <feature id="timing" value="0" type="boolean">
    <name>Timing API</name>
    <description>Does the browser support timing events?</description>
    <data>
    <plugin id="KnowledgeBase" property="timing"/>
    </data>
    <test type="text/javascript"><![CDATA[
    return +!!(window.performance && window.performance.timing);
    ]]></test>
  </feature>

  <feature id="sessionStorage" value="0" type="boolean">
    <name>Session storage</name>
    <description>Does the browser support session storage?</description>
    <data>
    <plugin id="KnowledgeBase" property="sessionStorage"/>
    </data>
    <test type="text/javascript"><![CDATA[
    return +!!(window.sessionStorage);
    ]]></test>
  </feature>

  <feature id="localStorage" value="0" type="boolean">
    <name>Persistent storage</name>
    <description>Does the browser support persistent storage?</description>
    <data>
    <plugin id="KnowledgeBase" property="localStorage"/>
    </data>
    <test type="text/javascript"><![CDATA[
    return +!!(window.localStorage);
    ]]></test>
  </feature>

  <feature id="devicePixelRatio" default="0" type="number">
    <name>Pixel ratio</name>
    <description>Pixel density of the screen.</description>
    <data>
    <plugin id="KnowledgeBase" property="devicePixelRatio"/>
    </data>
    <test type="text/javascript"><![CDATA[
    var ratio = window.devicePixelRatio;
    if (typeof ratio !== 'undefined') {
      ratio = parseInt(ratio, 10);
      if (isNaN(ratio)) {
        return 0;
      }
      return ratio;
    } else {
      return 0;
    }
    ]]></test>
  </feature>

  <feature id="mediaQuery" default="0" type="boolean">
    <name>Media query</name>
    <description>CSS media query support</description>
    <data/>
    <test type="text/javascript"><![CDATA[
  var styleElement = document.createElement("style"),
      cssCode = '@media only all { #mqTest { display:none; } }';
  document.write('<div id="mqTest"></div>');
  styleElement.type = "text/css";
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = cssCode;
  } else {
    styleElement.appendChild(document.createTextNode(cssCode));
  }
  document.getElementsByTagName("head")[0].appendChild(styleElement);
  return +(window.getComputedStyle(document.getElementById('mqTest'))['display'] === "none");
    ]]></test>
  </feature>

  <feature id="desktop" default="0" type="boolean">
    <name>Desktop</name>
    <description>Desktop browser</description>
    <data>
      <plugin id="DesktopGuess" property="isDesktop"/>
      <plugin id="DeviceAtlas" property="isBrowser"/>
    </data>
  </feature>
</profile>
